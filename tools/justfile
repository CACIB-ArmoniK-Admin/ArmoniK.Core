# Enable positional args
set positional-arguments

# Default values for the deployment
tag    := "test"
queue  := "active"
worker := "htcmock"

# Base compose file
export COMPOSE_BASE := "../docker-compose/docker-compose.yml"

# loggin level of deployment
export LOGGING_LEVEL := "Information"

# Sets the queue
export QUEUE := if queue == "rabbit" {
  "../docker-compose/docker-compose.queue-rabbitmq.yml"
}else if queue == "rabbit091"{
  "../docker-compose/docker-compose.queue-rabbitmq.yml"
}else if queue == "artemis"{
  "../docker-compose/docker-compose.queue-artemis.yml"
}else{
  "../docker-compose/docker-compose.queue-activemqp.yml"
}


# Sets the override to feed docker-compose
export OVERRIDE := if queue == "rabbit091" {
  "../docker-compose/docker-compose.override-rabbitmq091.yml"
}else{
  "../docker-compose/docker-compose.override.yml"
}

# Defines worker and enviroment variables for deployment
export ARMONIK_WORKER := if worker == "stream" {
  "dockerhubaneo/armonik_core_stream_test_worker:"+tag
}else{
  "dockerhubaneo/armonik_core_htcmock_test_worker:"+tag
}
export ARMONIK_METRICS          := "dockerhubaneo/armonik_control_metrics:"+tag
export ARMONIK_PARTITIONMETRICS := "dockerhubaneo/armonik_control_partitionmetrics:"+tag
export ARMONIK_SUBMITTER        := "dockerhubaneo/armonik_control:"+tag
export ARMONIK_POLLINGAGENT     := "dockerhubaneo/armonik_pollingagent:"+tag

# List recipes and their usage
@default:
  just --list
  just _usage

_usage:
  #!/usr/bin/env bash
  set -euo pipefail
  echo
  echo "The recipe deploy takes three arguments"
  echo
  echo "usage: just tag=<tag> queue=<queue> worker=<worker> deploy"
  echo "       if any of the variables is not set, its default value is used"
  echo
  echo "   tag: The core tag image to use, defaults to test"
  echo
  echo "   queue: allowed values below"
  cat <<-EOF
        active   :  for activemq (1.0.0 protocol) (default)
        rabbit   :  for rabbitmq (1.0.0 protocol)
        rabbit091:  for rabbitmq (0.9.1 protocol)
        artemis  :  for artemismq (1.0.0 protocol)
  EOF
  echo
  echo "   worker: allowed values below"
  cat <<-EOF
        htcmock: for HtcMock V3 (default)
        stream: for Stream worker
  EOF

# Custom command to build a single image
build imageTag dockerFile:
  docker build -t {{ imageTag }} -f {{ dockerFile }} ../

# Build all images necessary for the deployment 
build-all:
  #!/usr/bin/env bash
  set -euo pipefail
  if [ "x{{ worker }}" == "xstream" ]
  then
    just build $ARMONIK_WORKER  "../Tests/Stream/Server/Dockerfile"
  elif [ "x{{ worker }}" == "xhtcmock" ]
  then
    just build $ARMONIK_WORKER "../Tests/HtcMock/Server/src/Dockerfile"
  fi

  just build $ARMONIK_METRICS  "../Control/Metrics/src/Dockerfile"

  just build $ARMONIK_PARTITIONMETRICS "../Control/PartitionMetrics/src/Dockerfile"

  just build $ARMONIK_SUBMITTER "../Control/Submitter/src/Dockerfile"

  just build $ARMONIK_POLLINGAGENT "../Compute/PollingAgent/src/Dockerfile"

# Insert partitions in database
set-partitions:
  docker run --net armonik-backend --rm rtsp/mongosh mongosh mongodb://database:27017/database \
    --eval 'db.PartitionData.insertMany([{ _id: "TestPartition0", ParentPartitionIds: [], PodReserved: 50, PodMax: 100, PreemptionPercentage: 20, Priority: 1, PodConfiguration: null},{ _id: "TestPartition1", ParentPartitionIds: [], PodReserved: 50, PodMax: 100, PreemptionPercentage: 20, Priority: 1, PodConfiguration: null},{ _id: "TestPartition2", ParentPartitionIds: [], PodReserved: 50, PodMax: 100, PreemptionPercentage: 20, Priority: 1, PodConfiguration: null}])'

# Custom compose generic rule
compose *args:
  docker-compose -f $COMPOSE_BASE -f $OVERRIDE -f $QUEUE "$@"

# Call custom docker-compose
compose-invoke serviceName: (compose "rm" "-f" "-s" serviceName)

# Call custom docker-compose up
compose-up: (compose "--compatibility" "up" "-d" "--build" "--force-recreate" "--remove-orphans")

# Deploy ArmoniK Core
deploy: build-all
  just compose-invoke database
  just compose-invoke queue
  just compose-invoke object
  just compose-invoke seq

  just compose-up

  wait
  just set-partitions

# Run health checks  
healthChecks:
  #!/usr/bin/env bash
  set -euo pipefail
  for i in {0..2}; do 
    echo -e "\nHealth Checking PollingAggent${i}"
    curl -f localhost:998${i}/readiness
    curl -f localhost:998${i}/liveness
  done

# Remove dangling images
remove-dangling:
  docker images --quiet --filter=dangling=true | xargs --no-run-if-empty docker rmi

# Destroy deployment with docker-compose down
destroy: (compose "down")

# Custom command to restart the given service
restart serviceName: (compose "restart" serviceName)
