name: Release

on:
  push:
    branches:
      - release
    tags-ignore: [ '**' ]

jobs:
  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
      release: ${{ steps.genver.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }}-pre --dev-branch=${{ github.ref_name }})
        echo "::set-output name=version::$VERSION"
        echo "VERSION : $VERSION"
        RELEASE=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }} --dev-branch=main)
        echo "::set-output name=release::$RELEASE"
        echo "RELEASE : $RELEASE"

  tagImagesRelease:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
      RELEASE: ${{ needs.versionning.outputs.release }}
    strategy:
      fail-fast: true
      matrix:
        image:
        - dockerhubaneo/armonik_pollingagent
        - dockerhubaneo/armonik_control_metrics
        - dockerhubaneo/armonik_control_partition_metrics
        - dockerhubaneo/armonik_control
        - dockerhubaneo/armonik_core_stream_test_worker
        - dockerhubaneo/armonik_core_stream_test_client
        - dockerhubaneo/armonik_core_htcmock_test_worker
        - dockerhubaneo/armonik_core_htcmock_test_client
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: ReTag
      run: |
        set -xe
        CONTENT_TYPE="application/vnd.docker.distribution.manifest.v2+json"
        # CONTENT_TYPE="application/vnd.docker.distribution.manifest.list.v2+json" # we need a list when there is multiple tags for multi arch images
        TOKEN="$(curl -fsSL -u dhaneo1:${{ secrets.DOCKER_HUB_TOKEN }} "https://auth.docker.io/token?service=registry.docker.io&scope=repository:${{ matrix.image }}:pull,push" | jq --raw-output .token)"
        curl -fsSL -H "Accept: ${CONTENT_TYPE}" -H "Authorization: Bearer ${TOKEN}" "https://index.docker.io/v2/${{ matrix.image }}/manifests/${VERSION}" > manifest.json
        curl -fsSL -X PUT -H "Content-Type: ${CONTENT_TYPE}" -H "Authorization: Bearer ${TOKEN}" -d @manifest.json "https://index.docker.io/v2/${{ matrix.image }}/manifests/${RELEASE}"
        curl -fsSL -X PUT -H "Content-Type: ${CONTENT_TYPE}" -H "Authorization: Bearer ${TOKEN}" -d @manifest.json "https://index.docker.io/v2/${{ matrix.image }}/manifests/latest"

  tag:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/release' }}
    needs:
      - versionning
      - tagImagesRelease
    env:
      RELEASE: ${{ needs.versionning.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}

    - name: tag
      run: |
        git tag $RELEASE
        git push origin $RELEASE
